// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: machines.sql

package sqlc

import (
	"context"
)

const createMachine = `-- name: CreateMachine :one
INSERT INTO machines (
    name, origin_id
) VALUES (
    $1, $2
)
RETURNING id, created_at, name, origin_id
`

type CreateMachineParams struct {
	Name     string
	OriginID string
}

func (q *Queries) CreateMachine(ctx context.Context, arg CreateMachineParams) (Machine, error) {
	row := q.db.QueryRowContext(ctx, createMachine, arg.Name, arg.OriginID)
	var i Machine
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.OriginID,
	)
	return i, err
}

const deleteMachine = `-- name: DeleteMachine :exec
DELETE FROM machines
WHERE id = $1
`

func (q *Queries) DeleteMachine(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMachine, id)
	return err
}

const getMachines = `-- name: GetMachines :many
SELECT id, created_at, name, origin_id
FROM machines
`

func (q *Queries) GetMachines(ctx context.Context) ([]Machine, error) {
	rows, err := q.db.QueryContext(ctx, getMachines)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Machine
	for rows.Next() {
		var i Machine
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.OriginID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMachine = `-- name: UpdateMachine :one
UPDATE machines
    set name = $2,
    origin_id = $3
WHERE id = $1
RETURNING id, created_at, name, origin_id
`

type UpdateMachineParams struct {
	ID       int32
	Name     string
	OriginID string
}

func (q *Queries) UpdateMachine(ctx context.Context, arg UpdateMachineParams) (Machine, error) {
	row := q.db.QueryRowContext(ctx, updateMachine, arg.ID, arg.Name, arg.OriginID)
	var i Machine
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.OriginID,
	)
	return i, err
}
