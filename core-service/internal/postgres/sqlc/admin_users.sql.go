// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: admin_users.sql

package sqlc

import (
	"context"
)

const createAdminUser = `-- name: CreateAdminUser :one
INSERT INTO admin_users (
  username, email, password
) VALUES (
  $1, $2, $3
)
RETURNING id, created_at, username, email, password
`

type CreateAdminUserParams struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) CreateAdminUser(ctx context.Context, arg CreateAdminUserParams) (AdminUser, error) {
	row := q.db.QueryRowContext(ctx, createAdminUser, arg.Username, arg.Email, arg.Password)
	var i AdminUser
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getAdminUserById = `-- name: GetAdminUserById :many
SELECT id, created_at, username, email, password FROM admin_users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetAdminUserById(ctx context.Context, id int32) ([]AdminUser, error) {
	rows, err := q.db.QueryContext(ctx, getAdminUserById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AdminUser
	for rows.Next() {
		var i AdminUser
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Username,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdminUser = `-- name: UpdateAdminUser :exec
UPDATE admin_users
  set username = $2,
  email = $3
WHERE id = $1
`

type UpdateAdminUserParams struct {
	ID       int32
	Username string
	Email    string
}

func (q *Queries) UpdateAdminUser(ctx context.Context, arg UpdateAdminUserParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminUser, arg.ID, arg.Username, arg.Email)
	return err
}
